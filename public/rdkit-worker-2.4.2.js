(()=>{"use strict";const r=()=>{if(globalThis.rdkitWorkerGlobals?.jsMolCache)for(const[r,e]of Object.entries(globalThis.rdkitWorkerGlobals.jsMolCache))try{e.delete(),delete globalThis.rdkitWorkerGlobals.jsMolCache[r]}catch{}},e=(e,l)=>{const o=(r=>globalThis.rdkitWorkerGlobals.jsMolCacheEnabled&&globalThis.rdkitWorkerGlobals.jsMolCache?globalThis.rdkitWorkerGlobals.jsMolCache[r]:null)(e);if(o)return o;if(!e)return null;if(!l)return null;const t={removeHs:globalThis.rdkitWorkerGlobals.removeHs},s=l.get_mol(e,JSON.stringify(t));return((e,l)=>{if(globalThis.rdkitWorkerGlobals.jsMolCacheEnabled&&globalThis.rdkitWorkerGlobals.jsMolCache){if(Object.keys(globalThis.rdkitWorkerGlobals.jsMolCache).length>globalThis.rdkitWorkerGlobals.maxJsMolsCached)return r(),void(globalThis.rdkitWorkerGlobals.jsMolCache={[e]:l});try{globalThis.rdkitWorkerGlobals.jsMolCache[e]=l}catch(o){console.error(o),r(),globalThis.rdkitWorkerGlobals.jsMolCache={[e]:l}}}})(e,s),s},l=(l,o)=>{try{return e(l,o)}catch(t){return console.error(t),r(),e(l,o)}},o=r=>{!globalThis.rdkitWorkerGlobals.jsMolCacheEnabled&&r&&r.delete()},t=({smiles:r,drawingDetails:e,alignmentDetails:t})=>{const s=l(r,globalThis.workerRDKit);if(!s)return null;if(t){const r=l(t.molBlock,globalThis.workerRDKit);if(!r)return null;s.generate_aligned_coords(r,!0),o(r)}const a=e?JSON.stringify(e):"",i=s.get_svg_with_highlights(a);return t&&s.set_new_coords(),o(s),i},s=({smarts:r,width:e,height:l})=>{const o=globalThis.workerRDKit.get_qmol(r),t=o.get_svg(e,l);return o.delete(),t},a=r=>{if(!r)return!1;const e=l(r,globalThis.workerRDKit);if(!e)return!1;const t=e.is_valid();return o(e),t},i=r=>{if(!r)return!1;const e=globalThis.workerRDKit.get_qmol(r),l=e.is_valid();return globalThis.rdkitWorkerGlobals.jsMolCacheEnabled||e.delete(),l},n=r=>{const e=l(r,globalThis.workerRDKit);if(!e)return null;const t=e.get_smiles();return o(e),t},c=r=>{const e=l(r,globalThis.workerRDKit);if(!e)return null;const t=e.get_smarts();return o(e),t},u=({smiles:r,substructure:e})=>{const o=l(r,globalThis.workerRDKit),t=globalThis.workerRDKit.get_qmol(e);if(!o)return!1;const s=JSON.parse(o.get_substruct_match(t)),a=JSON.parse(o.get_json());return!!s&&!!Object.keys(s).length&&!!a.molecules&&1===a.molecules?.length&&s.atoms?.length===a.molecules[0]?.atoms?.length},d=r=>{if(!r.includes("M  END"))return!1;const e=l(r,globalThis.workerRDKit);if(!e)return!1;try{return e.is_valid()}finally{o(e)}},h=({moleculeString:r,targetNotation:e,sourceNotation:t,useQMol:s=!1})=>{if(null!=t){if(t===e)throw new Error("@iktos-oss/rdkit-provider: source and target notations must differ");if(!T(r,t))throw new Error("@iktos-oss/rdkit-provider: molecule string not valid")}const a=s?globalThis.workerRDKit.get_qmol(r):l(r,globalThis.workerRDKit);if(!a)return null;try{return a[`get_${e}`]()}catch(r){throw console.error(r),new Error("@iktos-oss/rdkit-provider: target notation not implemented")}finally{s?a?.delete():o(a)}},g=(r,e)=>{const t=l(r,globalThis.workerRDKit);if(!t)return null;try{return void 0!==e?t.get_new_coords(e):t.get_new_coords()}finally{o(t)}},b=r=>{const e=l(r,globalThis.workerRDKit);if(!e)return null;try{const r=e.remove_hs();return g(r,!1)}finally{o(e)}},k=r=>{const e=l(r,globalThis.workerRDKit);if(!e)return null;try{let r=e.add_hs();return r=g(r,!1),r}finally{o(e)}},T=(r,e)=>{switch(e){case"molblock":return d(r);case"smiles":case"smarts":return a(r);default:throw new Error(`@iktos-oss/rdkit-provider: validate ${e} not implemented`)}};addEventListener("message",(async({data:e})=>{let T;switch(e.actionType){case"INIT_RDKIT_MODULE":await(async({rdkitPath:r,preferCoordgen:e,removeHs:l,cache:o={}})=>{if(o&&(({cache:r,removeHs:e})=>{const{enableJsMolCaching:l,maxJsMolsCached:o}=r;globalThis.rdkitWorkerGlobals={jsMolCacheEnabled:!!l,jsMolCache:l?{}:null,maxJsMolsCached:o??150,removeHs:e}})({cache:o,removeHs:l}),globalThis.workerRDKit)return;const t=new URL(r||"/RDKit_minimal.js",globalThis.origin);importScripts(t),globalThis.initRDKitModule&&(globalThis.workerRDKit=await globalThis.initRDKitModule(),globalThis.workerRDKit.prefer_coordgen(e))})(e.payload);break;case"GET_MOLECULE_DETAILS":T=(r=>{const e=l(r,globalThis.workerRDKit);if(!e)return null;const t=JSON.parse(e.get_descriptors());return o(e),{numAtoms:t.NumHeavyAtoms,numRings:t.NumRings}})(e.payload.smiles);break;case"GET_CANONICAL_FORM_FOR_STRUCTURE":T={canonicalForm:(_=e.payload.structure,a(_)?n(_):c(_))};break;case"GET_SVG":T={svg:t(e.payload)};break;case"GET_SVG_FROM_SMARTS":T={svg:s(e.payload)};break;case"IS_VALID_SMILES":T={isValid:a(e.payload.smiles)};break;case"IS_VALID_SMARTS":T={isValid:i(e.payload.smarts)};break;case"HAS_MATCHING_SUBSTRUCTURE":T={matching:u(e.payload)};break;case"GET_SUBSTRUCTURE_MATCH":T=(({structure:r,substructure:e})=>{const t=l(r,globalThis.workerRDKit),s=l(e,globalThis.workerRDKit);if(!t||!s)return null;const{atoms:a,bonds:i}=JSON.parse(t.get_substruct_match(s));return o(t),o(s),{matchingAtoms:a,matchingBonds:i}})(e.payload);break;case"IS_VALID_MOLBLOCK":T={isValid:d(e.payload.mdl)};break;case"CONVERT_MOL_NOTATION":T={structure:h(e.payload)};break;case"ADD_HS":T={mdl:k(e.payload.structure)};break;case"REMOVE_HS":T={mdl:b(e.payload.structure)};break;case"GET_NEW_COORDS":T={mdl:g(e.payload.structure,e.payload.useCoordGen)};break;case"TERMINATE":r(),self.close();break;default:return}var _,m;postMessage({actionType:(m=e.actionType,m+"_LOCAL_RESPONSE"),payload:T,key:e.key})}))})();